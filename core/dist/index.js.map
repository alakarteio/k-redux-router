{"version":3,"file":"index.js","sources":["../src/actions.js","../src/middleware.js","../src/selectors.js","../src/init.js","../src/factory.js","../src/reducer.js"],"sourcesContent":["export const push = (code, pathParams, queryParams) => ({\n  type: '@@router/PUSH',\n  payload: {\n    code,\n    params: {\n      path: pathParams,\n      query: queryParams,\n    },\n  },\n})\n","/* eslint-env browser */\n\n// https://stackoverflow.com/questions/1714786/query-string-encoding-of-a-javascript-object\nconst toQueryString = obj => Object.keys(obj).map(k => `${encodeURIComponent(k)}=${encodeURIComponent(obj[k])}`).join('&')\n\n// https://stackoverflow.com/questions/8648892/convert-url-parameters-to-a-javascript-object\nconst queryToObject = () => {\n  const { location } = window\n\n  if (location.search.length < 2) return {}\n\n  const search = location.search.substring(1)\n  return JSON.parse(`{\"${decodeURI(search).replace(/\"/g, '\\\\\"').replace(/&/g, '\",\"').replace(/=/g, '\":\"')}\"}`)\n}\n\nconst routeFound = result => ({ type: '@@router/ROUTE_FOUND', payload: Object.assign({ found: true }, result) })\n\nconst dispatchResultFactory = reducer => (store) => {\n  if (window && window.location && window.location.pathname) {\n    // find route (& path params)\n    let pathParams\n    const route = reducer.getState(store.getState()).routes.array.find((r) => {\n      pathParams = r.href.regexp.exec(window.location.pathname)\n      return !!pathParams\n    })\n\n    // attach names to path params\n    pathParams = route.href.parsed\n      .map(part => part.name)\n      .filter(Boolean)\n      .reduce(\n        (acc, curr, index) => Object.assign({ [curr]: pathParams[index + 1] }, acc),\n        {},\n      )\n\n    store.dispatch(routeFound({\n      route,\n      params: {\n        path: pathParams,\n        query: queryToObject(),\n      },\n    }))\n  }\n}\n\nconst mapActionFactory = reducer => store => (action) => {\n  const { type, payload } = action\n\n  switch (type) {\n    case '@@router/PUSH': {\n      const { code, params } = payload\n\n      // find route\n      const route = reducer.getState(store.getState()).routes.map[code]\n\n      // update history API\n      if (route) {\n        const { href } = route\n        let queryPart = ''\n\n        let toPush = href.base\n        if (href.compiled) toPush = href.compiled(params.path)\n        if (params.query) queryPart = `?${toQueryString(params.query)}`\n\n        window.history.pushState(undefined, undefined, `${toPush}${queryPart}`)\n      }\n\n      // TODO: if no route, find the closest `notFound` to push it in `result`\n\n      // update state\n      return routeFound({\n        route,\n        params,\n      })\n    }\n    // default is undefined so we avoid infinite loop\n    default: return undefined\n  }\n}\n\nexport default (routes, options, reducer) => {\n  let initialized = false\n  const dispatchResult = dispatchResultFactory(reducer)\n  const mapAction = mapActionFactory(reducer)\n\n  // redux middleware\n  return store => next => (action) => {\n    // these action are not catched by the middleware and are used as it is\n    if (!action.type || !action.type.startsWith('@@router/')) return next(action)\n\n    // dispatch base action so other lib and reducer can plug to it\n    const res = next(action)\n\n    // init watchers (location/INIT)\n    // - this is done here because we can't dispatch when middlewares tree is initialized by redux\n    // - so we make sure that the dispatch are done when we are initialized\n    if (action.type === '@@router/INIT') {\n      dispatchResult(store) // TODO: move to store.dispatch pattern\n\n      if (initialized) {\n        console.warn('[k-redux-router] initialized twice') // eslint-disable-line no-console\n      } else {\n        initialized = true\n\n        // watcher (location)\n        window.onpopstate = () => { dispatchResult(store) } // TODO: move to store.dispatch pattern\n      }\n    }\n\n    if (!initialized && action.type !== '@@router/ROUTE_FOUND') console.warn('[k-redux-router] router should be initialized') // eslint-disable-line no-console\n\n    // router actions can found a new route\n    const newAction = mapAction(store)(action)\n    if (newAction) store.dispatch(newAction)\n\n    return res\n  }\n}\n","export default (getState) => {\n  const getRoute = code => state => getState(state).routes.map[code]\n  const getResult = state => getState(state).result\n  const getCurrentCode = state => getRoute(state).code\n  const getCurrentRoute = state => getResult(state).route\n  const isFound = state => getResult(state).found\n  const getParams = state => getResult(state).params\n  const getPathParams = state => getParams(state).path\n  const getQueryParams = state => getParams(state).query\n  const getPathParam = code => state => getPathParams(state)[code]\n  const getQueryParam = code => state => getQueryParams(state)[code]\n  const getParam = code => state => getPathParam(code)(state) || getQueryParam(code)(state)\n\n  return {\n    getState,\n    getRoute,\n    getResult,\n    getCurrentCode,\n    getCurrentRoute,\n    isFound,\n    getParams,\n    getPathParams,\n    getQueryParams,\n    getPathParam,\n    getQueryParam,\n    getParam,\n  }\n}\n","export default () => ({ type: '@@router/INIT' })\n","/* eslint-env browser */\nimport pathToRegexp from 'path-to-regexp'\nimport middleware from './middleware'\nimport reducer from './reducer'\nimport init from './init'\n\nconst isRoute = route => typeof route === 'object' && route.code\n\nconst getFullHrefVersion = (routes) => {\n  const fullVersion = []\n\n  const addRoute = (base, parent, route) => {\n    // parameters to copy from parent to route\n    let propertiesToCopy = {}\n    if (parent) {\n      propertiesToCopy = Object\n        .entries(parent)\n        // eslint-disable-next-line no-unused-vars\n        .filter(([key, value]) => !isRoute(value)) // remove children routes\n        .reduce(\n          (acc, [key, value]) => Object.assign(acc, { [key]: value }),\n          {},\n        )\n    }\n\n    // process href and add to array\n    let innerRoute = route\n    if (parent) {\n      innerRoute = Object.assign(\n        propertiesToCopy,\n        route,\n        {\n          parent: parent && parent.code,\n          href: {\n            base,\n            compiled: (base.includes(':') ? pathToRegexp.compile(base) : undefined),\n            regexp: pathToRegexp(base),\n            parsed: pathToRegexp.parse(base),\n          },\n        },\n      )\n\n      fullVersion.push(innerRoute)\n    }\n\n    // process children\n    Object\n      .entries(route)\n      .filter(([key, value]) => isRoute(value)) // eslint-disable-line no-unused-vars\n      .forEach(([href, childRoute]) => addRoute([base, href].join('').replace('//', '/'), innerRoute, childRoute))\n  }\n\n  // start the graph\n  addRoute('', undefined, routes)\n\n  // update links\n  fullVersion.forEach((route) => {\n    // children\n    Object\n      .entries(route)\n      .forEach(([key, value]) => {\n        let newValue = value\n        if (isRoute(value)) newValue = value.code\n\n        route[key] = newValue // eslint-disable-line no-param-reassign\n      })\n  })\n\n  return fullVersion\n}\n\nexport default (routes, options = {}) => {\n  // get history implementation (default is window.history _this is history API_)\n  let { history } = options\n  if (!history && window && window.history) history = window.history // eslint-disable-line prefer-destructuring\n  if (!history) throw new Error('[k-redux-router] no history implementation is given')\n\n  // transform route\n  const innerRoutes = { array: getFullHrefVersion(routes) }\n  innerRoutes.map = innerRoutes.array.reduce(\n    (acc, curr) => Object.assign({}, acc, { [curr.code]: curr }),\n    {},\n  )\n\n  // implementations\n  const reducerImpl = reducer(innerRoutes, options)\n  return ({\n    middleware: middleware(innerRoutes, options, reducerImpl),\n    reducer: reducerImpl,\n    init,\n  })\n}\n","import * as actions from './actions'\nimport selectors from './selectors'\n\nexport default (routes, options) => {\n  // init redux state\n  const initState = Object.assign(\n    {},\n    {\n      routes,\n      result: { found: false },\n    },\n  )\n\n  const reducer = (state = initState, { type, payload } = {}) => {\n    switch (type) {\n      case '@@router/ROUTE_FOUND': return Object.assign({}, state, { result: payload })\n      default: return state\n    }\n  }\n\n  // selectors\n  Object.assign(reducer, selectors(options.getState || (state => state.ui.router)))\n\n  // actions\n  Object.assign(reducer, actions)\n\n  return reducer\n}\n"],"names":["code","pathParams","queryParams","type","payload","params","path","query","routeFound","result","Object","assign","found","dispatchResultFactory","reducer","store","window","location","pathname","let","route","getState","routes","array","find","r","href","regexp","exec","parsed","map","part","name","filter","Boolean","reduce","acc","curr","index","dispatch","search","length","const","substring","JSON","parse","decodeURI","replace","queryToObject","mapActionFactory","action","obj","queryPart","toPush","base","compiled","keys","k","encodeURIComponent","join","history","pushState","undefined","getRoute","state","getResult","getParams","getPathParams","getQueryParams","getPathParam","getQueryParam","isRoute","getFullHrefVersion","fullVersion","addRoute","parent","propertiesToCopy","entries","ref","innerRoute","includes","pathToRegexp","compile","push","forEach","childRoute","key","value","newValue","options","Error","innerRoutes","reducerImpl","initState","selectors","ui","router","actions","middleware","initialized","dispatchResult","mapAction","next","startsWith","res","console","warn","onpopstate","newAction","init"],"mappings":"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"}